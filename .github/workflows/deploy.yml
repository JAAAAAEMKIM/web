name: Build and Deploy Docker Image

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm exec prisma generate

      - name: Run linter
        run: pnpm lint

      - name: Build application
        run: pnpm build

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate deployment artifact
        run: |
          mkdir -p deployment
          echo "${{ steps.meta.outputs.tags }}" | head -1 > deployment/image-tag.txt
          cp docker-compose.prod.yml deployment/
          cp -r nginx deployment/
          cp -r scripts deployment/ 2>/dev/null || true

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-${{ github.sha }}
          path: deployment/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-${{ github.sha }}
          path: deployment/

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script_stop: true
          script: |
            # Create deployment directory
            mkdir -p /home/${{ secrets.DEPLOY_USER }}/mysite-blog
            cd /home/${{ secrets.DEPLOY_USER }}/mysite-blog

            # Backup current database if it exists
            if [ -f data/prod.db ]; then
              cp data/prod.db data/prod.db.backup.$(date +%Y%m%d_%H%M%S)
              echo "Database backed up"
            fi

            # Create necessary directories
            mkdir -p data nginx scripts

            # Download new image
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Get the new image tag
            NEW_IMAGE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" | \
              jq -r '.artifacts[] | select(.name | startswith("deployment-")) | .archive_download_url' | head -1)

            # Pull the latest image
            docker pull ghcr.io/${{ env.IMAGE_NAME }}:latest

            # Stop existing containers
            docker compose -f docker-compose.prod.yml down || true

            # Start new containers
            docker compose -f docker-compose.prod.yml up -d

            # Wait for health check
            echo "Waiting for application to be healthy..."
            for i in {1..30}; do
              if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
                echo "Application is healthy!"
                break
              fi
              echo "Attempt $i/30: Application not ready yet..."
              sleep 10
            done

            # Clean up old images
            docker image prune -f

            echo "Deployment completed successfully!"

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            Deployment to production ${{ job.status }}!
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}