name: Build and Deploy Docker Image

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate deployment artifact
        run: |
          mkdir -p deployment
          cp docker-compose.prod.yml deployment/

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-${{ github.sha }}
          path: deployment/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-${{ github.sha }}
          path: deployment/

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
          DEPLOY_PORT: ${{ secrets.DEPLOY_PORT || 22 }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.DEPLOY_SSH_KEY }}
          port: ${{ env.DEPLOY_PORT }}
          envs: DEPLOY_HOST,DEPLOY_USER,DEPLOY_PORT,GITHUB_TOKEN,GITHUB_ACTOR,GITHUB_REPOSITORY
          script_stop: true
          script: |
            # Go to deployment directory
            cd /home/$DEPLOY_USER/web
            source .env.production
            
            echo "DEPLOY_HOST: $DEPLOY_HOST"
            echo "DEPLOY_USER: $DEPLOY_USER"
            echo "DEPLOY_PORT: $DEPLOY_PORT"

            # Login to GitHub Container Registry
            echo "$GITHUB_TOKEN" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

            # Pull the latest image
            docker pull ghcr.io/$GITHUB_REPOSITORY:latest

            # Stop existing containers
            docker compose -f docker-compose.prod.yml down || true

            # Start new containers
            docker compose -f docker-compose.prod.yml up -d

            # Wait for health check
            echo "Waiting for application to be healthy..."
            for i in {1..30}; do
              if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
                echo "Application is healthy!"
                break
              fi
              echo "Attempt $i/30: Application not ready yet..."
              sleep 10
            done

            # Clean up old images
            docker image prune -f

            echo "Deployment completed successfully!"